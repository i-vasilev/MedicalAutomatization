Login = SELECT users.id_user, users.name, users.address, users.is_removed, users.insurance, users.date_birth, userroles.role FROM users LEFT JOIN userroles on users.role=userroles.id_role WHERE insurance=? AND password=? AND is_removed = 0
getPatientByInsurance = SELECT users.id_user, users.name, users.address, users.is_removed, users.insurance, users.date_birth, userroles.role FROM users LEFT JOIN userroles on users.role=userroles.id_role WHERE insurance=?
activationUser = UPDATE users SET users.is_removed=? WHERE users.id_user = ?
addUser = INSERT INTO USERS(insurance, name, date_birth, address, region, role, password) VALUES(?,?,?,?,?,(SELECT id_role FROM userroles WHERE role=?), ?)
updateSpecialization = MERGE INTO LINKING_SPECIALIZATION_TO_USER l USING LINKING_SPECIALIZATION_TO_USER l1 ON (l1.user_ = ?) WHEN MATCHED THEN UPDATE SET specialization = ? WHEN NOT MATCHED THEN INSERT (specialization, user_) VALUES (?, ?)
updateRegion = MERGE INTO LINKING_DOCTORS_TO_REGION l  USING LINKING_DOCTORS_TO_REGION l1 ON (l1.user_ = ?) WHEN MATCHED THEN UPDATE SET region = ? WHEN NOT MATCHED THEN INSERT (region, user_) VALUES (?, ?)
getDoctors = SELECT users.id_user, users.name, users.address, users.is_removed, users.insurance, users.date_birth, userroles.role, system.specializations.specialization FROM users left JOIN userroles ON users.role = userroles.id_role INNER JOIN system.linking_specialization_to_user ON system.linking_specialization_to_user.user_ = users.id_user INNER JOIN system.specializations ON system.linking_specialization_to_user.specialization = system.specializations.id_specialization WHERE userroles.role = ?
getRecordsByPatient = SELECT records.id_record, records.time, specializations.specialization, doctor.name AS doctor_name, doctor.id_user AS id_doctor, records.complaints, records.prescribing, records.conclusion, records.is_appear FROM records left JOIN ( users doctor LEFT JOIN ( linking_specialization_to_user left JOIN specializations ON linking_specialization_to_user.specialization = specializations.id_specialization ) ON doctor.id_user = linking_specialization_to_user.user_ ) ON records.doctor = doctor.id_user LEFT JOIN users patient ON records.patient = patient.id_user WHERE patient.insurance = ?
getRecordsByDateAndDoctor = SELECT records.id_record, records.time, patient.id_user, patient.name, patient.address, patient.is_removed, patient.insurance, patient.date_birth, userroles.role FROM records LEFT JOIN users patient LEFT JOIN userroles on patient.role=userroles.id_role on records.patient=patient.id_user WHERE records.doctor = ? AND records.time > trunc(sysdate) AND records.time < trunc(sysdate) + 1 AND records.is_appear=0 AND records.patient is not null 
updateRecord = UPDATE RECORDS SET complaints=?, conclusion=?, prescribing=?, is_appear=? WHERE id_record=?
setPatientToRecord = UPDATE RECORDS SET Patient=? WHERE id_record=?
removePatientFromRecord = UPDATE RECORDS SET patient=null WHERE id_record=?
getRecordsByDoctor = SELECT records.id_record, records.time FROM records LEFT JOIN users patient LEFT JOIN userroles on patient.role=userroles.id_role on records.patient=patient.id_user WHERE records.doctor = ? AND records.is_appear=0 AND records.patient is null
addRecord = INSERT INTO RECORDS(doctor, time) VALUES (?, ?)
getDoctorsRegions = SELECT ID_LINK_DTR id, name FROM LINKING_DOCTORS_TO_REGION LEFT JOIN USERS ON LINKING_DOCTORS_TO_REGION.user_ = USERS.ID_USER
getAllRegions = SELECT * FROM Regions
getCurrentRegion = SELECT region id FROM LINKING_DOCTORS_TO_REGION WHERE LINKING_DOCTORS_TO_REGION.user_=?
getSpecializations = SELECT * FROM Specializations
getCurrentSpecialization = SELECT * FROM LINKING_SPECIALIZATION_TO_USER WHERE User_=?
